"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var react_redux_1 = require("react-redux");
var redux_1 = require("redux");
var redux_thunk_1 = require("redux-thunk");
/**
 * Redux store class builder.
 */
var ReduxStore = /** @class */ (function () {
    function ReduxStore(reducer) {
        var _this = this;
        /**
         * Store provider that wraps your root application.
         */
        this.Provider = function (_a) {
            var children = _a.children;
            return (react_1.default.createElement(react_redux_1.Provider, { store: _this.store }, children));
        };
        this.reducer = reducer;
    }
    ReduxStore.prototype.init = function (param, beforeMiddleware, afterMiddleware) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var initialState, _a, _b, middlewares, middleware;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        initialState = {};
                        if (!(typeof param === 'function')) return [3 /*break*/, 2];
                        return [4 /*yield*/, param()];
                    case 1:
                        initialState = _c.sent();
                        return [3 /*break*/, 8];
                    case 2:
                        if (!(typeof param === 'object')) return [3 /*break*/, 8];
                        if (!param.initialState) return [3 /*break*/, 6];
                        if (!(typeof param.initialState === 'function')) return [3 /*break*/, 4];
                        return [4 /*yield*/, param.initialState()];
                    case 3:
                        _b = _c.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        _b = param.initialState;
                        _c.label = 5;
                    case 5:
                        _a = _b;
                        return [3 /*break*/, 7];
                    case 6:
                        _a = {};
                        _c.label = 7;
                    case 7:
                        initialState = _a;
                        beforeMiddleware = param.beforeMiddleware;
                        afterMiddleware = param.afterMiddleware;
                        _c.label = 8;
                    case 8:
                        middlewares = [];
                        if (beforeMiddleware instanceof Array) {
                            middlewares.push.apply(middlewares, beforeMiddleware);
                        }
                        else if (beforeMiddleware) {
                            middlewares.push(beforeMiddleware);
                        }
                        middlewares.push(redux_thunk_1.default);
                        if (afterMiddleware instanceof Array) {
                            middlewares.push.apply(middlewares, afterMiddleware);
                        }
                        else if (afterMiddleware) {
                            middlewares.push(afterMiddleware);
                        }
                        middleware = redux_1.applyMiddleware.apply(void 0, middlewares);
                        this.store = redux_1.createStore(this.reducer, initialState, middleware);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Store HOC.
     * @param mapStateToProps Map local state to store state
     * @param mapDispatchToProps Map local action to store action
     */
    ReduxStore.prototype.withStore = function (mapStateToProps, mapDispatchToProps) {
        return react_redux_1.connect(mapStateToProps, mapDispatchToProps);
    };
    /**
     * Store class decorator.
     * @param mapStateToProps Map local state to store state
     * @param mapDispatchToProps Map local action to store action
     */
    ReduxStore.prototype.withStoreClass = function (mapStateToProps, mapDispatchToProps) {
        var _this = this;
        return function (target) {
            return _this.withStore(mapStateToProps, mapDispatchToProps)(target);
        };
    };
    return ReduxStore;
}());
exports.ReduxStore = ReduxStore;
//# sourceMappingURL=index.js.map