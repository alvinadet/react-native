import React from 'react'
import {
  MapDispatchToPropsParam,
  MapStateToPropsParam,
  InferableComponentEnhancerWithProps
} from 'react-redux'
import { Action, Middleware, Reducer, Store } from 'redux'
import { ThunkDispatch } from 'redux-thunk'
/**
 * Redux store class builder.
 */
export declare class ReduxStore<
  TState,
  TAction extends Action,
  ThunkDispatchFn = ThunkDispatch<TState, undefined, TAction>
> {
  reducer: Reducer<TState, TAction>
  store: Store<TState & {}, TAction> & {
    dispatch: {}
  }
  constructor(reducer: Reducer<TState, TAction>)
  /**
   * Initialze app store. Call this once before using Store.Provider.
   * @param param state and middlewares
   */
  init(param: InitStoreParameter<TState>): Promise<void>
  /**
   * Initialze app store. Call this once before using Store.Provider.
   * @param getInitialState Async function to to get the initial app state.
   * @param beforeMiddleware Redux Middleware before thunk middleware get called.
   * @param afterMiddleware Redux middleware after thunk middleware get called.
   */
  init(
    getInitialState?: () => Promise<Partial<TState>>,
    beforeMiddleware?: Middleware<{}, TState> | Middleware<{}, TState>[],
    afterMiddleware?: Middleware<{}, TState> | Middleware<{}, TState>[]
  ): Promise<void>
  /**
   * Store provider that wraps your root application.
   */
  Provider: React.SFC
  /**
   * Store HOC.
   * @param mapStateToProps Map local state to store state
   * @param mapDispatchToProps Map local action to store action
   */
  withStore<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}>(
    mapStateToProps?: MapStateToPropsParam<TStateProps, TOwnProps, TState>,
    mapDispatchToProps?: (
      dispatch: ThunkDispatchFn,
      ownProps: TOwnProps
    ) => MapDispatchToPropsParam<TDispatchProps, TOwnProps>
  ): InferableComponentEnhancerWithProps<
    TStateProps & TDispatchProps,
    TOwnProps
  >
  /**
   * Store class decorator.
   * @param mapStateToProps Map local state to store state
   * @param mapDispatchToProps Map local action to store action
   */
  withStoreClass<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}>(
    mapStateToProps?: MapStateToPropsParam<TStateProps, TOwnProps, TState>,
    mapDispatchToProps?: (
      dispatch: ThunkDispatchFn,
      ownProps: TOwnProps
    ) => MapDispatchToPropsParam<TDispatchProps, TOwnProps>
  ): ClassDecorator
}
export interface InitStoreParameter<TState> {
  initialState?: (() => Promise<Partial<TState>>) | Partial<TState>
  beforeMiddleware?: Middleware<{}, TState> | Middleware<{}, TState>[]
  afterMiddleware?: Middleware<{}, TState> | Middleware<{}, TState>[]
}
